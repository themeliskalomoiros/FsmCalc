using Calculator;

namespace StateMachineTests;

public class StateMachineShould
{
    [Theory]
    [InlineData(State.Init, Alphabet.Zero, State.Init)]
    [InlineData(State.Init, Alphabet.One, State.FirstOperand)]
    [InlineData(State.Init, Alphabet.Two, State.FirstOperand)]
    [InlineData(State.Init, Alphabet.Three, State.FirstOperand)]
    [InlineData(State.Init, Alphabet.Four, State.FirstOperand)]
    [InlineData(State.Init, Alphabet.Five, State.FirstOperand)]
    [InlineData(State.Init, Alphabet.Six, State.FirstOperand)]
    [InlineData(State.Init, Alphabet.Seven, State.FirstOperand)]
    [InlineData(State.Init, Alphabet.Eight, State.FirstOperand)]
    [InlineData(State.Init, Alphabet.Nine, State.FirstOperand)]
    [InlineData(State.Init, Alphabet.Addition, State.SecondOperand)]
    [InlineData(State.Init, Alphabet.Subtraction, State.SecondOperand)]
    [InlineData(State.Init, Alphabet.Multiplication, State.SecondOperand)]
    [InlineData(State.Init, Alphabet.Division, State.SecondOperand)]
    [InlineData(State.Init, Alphabet.Percent, State.Init)]
    [InlineData(State.Init, Alphabet.OneOfTerm, State.Init)]
    [InlineData(State.Init, Alphabet.SquareRoot, State.Result)]
    [InlineData(State.Init, Alphabet.PowerOfTwo, State.Result)]
    [InlineData(State.Init, Alphabet.Sign, State.Init)]
    [InlineData(State.Init, Alphabet.Dot, State.FirstOperand)]
    [InlineData(State.Init, Alphabet.ClearEntry, State.Init)]
    [InlineData(State.Init, Alphabet.Clear, State.Init)]
    [InlineData(State.Init, Alphabet.Backspace, State.Init)]
    [InlineData(State.Init, Alphabet.Equation, State.Init)]
    [InlineData(State.FirstOperand, Alphabet.Zero, State.FirstOperand)]
    [InlineData(State.FirstOperand, Alphabet.One, State.FirstOperand)]
    [InlineData(State.FirstOperand, Alphabet.Two, State.FirstOperand)]
    [InlineData(State.FirstOperand, Alphabet.Three, State.FirstOperand)]
    [InlineData(State.FirstOperand, Alphabet.Four, State.FirstOperand)]
    [InlineData(State.FirstOperand, Alphabet.Five, State.FirstOperand)]
    [InlineData(State.FirstOperand, Alphabet.Six, State.FirstOperand)]
    [InlineData(State.FirstOperand, Alphabet.Seven, State.FirstOperand)]
    [InlineData(State.FirstOperand, Alphabet.Eight, State.FirstOperand)]
    [InlineData(State.FirstOperand, Alphabet.Nine, State.FirstOperand)]
    [InlineData(State.FirstOperand, Alphabet.Addition, State.SecondOperand)]
    [InlineData(State.FirstOperand, Alphabet.Subtraction, State.SecondOperand)]
    [InlineData(State.FirstOperand, Alphabet.Multiplication, State.SecondOperand)]
    [InlineData(State.FirstOperand, Alphabet.Division, State.SecondOperand)]
    [InlineData(State.FirstOperand, Alphabet.Percent, State.Init)]
    [InlineData(State.FirstOperand, Alphabet.OneOfTerm, State.Result)]
    [InlineData(State.FirstOperand, Alphabet.SquareRoot, State.Result)]
    [InlineData(State.FirstOperand, Alphabet.PowerOfTwo, State.Result)]
    [InlineData(State.FirstOperand, Alphabet.Sign, State.FirstOperand)]
    [InlineData(State.FirstOperand, Alphabet.Dot, State.FirstOperand)]
    [InlineData(State.FirstOperand, Alphabet.ClearEntry, State.Init)]
    [InlineData(State.FirstOperand, Alphabet.Clear, State.Init)]
    [InlineData(State.FirstOperand, Alphabet.Backspace, State.FirstOperand)]
    [InlineData(State.FirstOperand, Alphabet.Equation, State.FirstOperand)]
    [InlineData(State.SecondOperand, Alphabet.Zero, State.SecondOperand)]
    [InlineData(State.SecondOperand, Alphabet.One, State.SecondOperand)]
    [InlineData(State.SecondOperand, Alphabet.Two, State.SecondOperand)]
    [InlineData(State.SecondOperand, Alphabet.Three, State.SecondOperand)]
    [InlineData(State.SecondOperand, Alphabet.Four, State.SecondOperand)]
    [InlineData(State.SecondOperand, Alphabet.Five, State.SecondOperand)]
    [InlineData(State.SecondOperand, Alphabet.Six, State.SecondOperand)]
    [InlineData(State.SecondOperand, Alphabet.Seven, State.SecondOperand)]
    [InlineData(State.SecondOperand, Alphabet.Eight, State.SecondOperand)]
    [InlineData(State.SecondOperand, Alphabet.Nine, State.SecondOperand)]
    [InlineData(State.SecondOperand, Alphabet.Addition, State.SecondOperand)]
    [InlineData(State.SecondOperand, Alphabet.Subtraction, State.SecondOperand)]
    [InlineData(State.SecondOperand, Alphabet.Multiplication, State.SecondOperand)]
    [InlineData(State.SecondOperand, Alphabet.Division, State.SecondOperand)]
    [InlineData(State.SecondOperand, Alphabet.Percent, State.Result)]
    [InlineData(State.SecondOperand, Alphabet.OneOfTerm, State.Result)]
    [InlineData(State.SecondOperand, Alphabet.SquareRoot, State.Result)]
    [InlineData(State.SecondOperand, Alphabet.PowerOfTwo, State.Result)]
    [InlineData(State.SecondOperand, Alphabet.Sign, State.SecondOperand)]
    [InlineData(State.SecondOperand, Alphabet.Dot, State.SecondOperand)]
    [InlineData(State.SecondOperand, Alphabet.ClearEntry, State.FirstOperand)]
    [InlineData(State.SecondOperand, Alphabet.Clear, State.Init)]
    [InlineData(State.SecondOperand, Alphabet.Backspace, State.SecondOperand)]
    [InlineData(State.SecondOperand, Alphabet.Equation, State.Result)]
    [InlineData(State.Result, Alphabet.Zero, State.FirstOperand)]
    [InlineData(State.Result, Alphabet.One, State.FirstOperand)]
    [InlineData(State.Result, Alphabet.Two, State.FirstOperand)]
    [InlineData(State.Result, Alphabet.Three, State.FirstOperand)]
    [InlineData(State.Result, Alphabet.Four, State.FirstOperand)]
    [InlineData(State.Result, Alphabet.Five, State.FirstOperand)]
    [InlineData(State.Result, Alphabet.Six, State.FirstOperand)]
    [InlineData(State.Result, Alphabet.Seven, State.FirstOperand)]
    [InlineData(State.Result, Alphabet.Eight, State.FirstOperand)]
    [InlineData(State.Result, Alphabet.Nine, State.FirstOperand)]
    [InlineData(State.Result, Alphabet.Addition, State.FirstOperand)]
    [InlineData(State.Result, Alphabet.Subtraction, State.FirstOperand)]
    [InlineData(State.Result, Alphabet.Multiplication, State.FirstOperand)]
    [InlineData(State.Result, Alphabet.Division, State.FirstOperand)]
    [InlineData(State.Result, Alphabet.Percent, State.Result)]
    [InlineData(State.Result, Alphabet.OneOfTerm, State.Result)]
    [InlineData(State.Result, Alphabet.SquareRoot, State.Result)]
    [InlineData(State.Result, Alphabet.PowerOfTwo, State.Result)]
    [InlineData(State.Result, Alphabet.Sign, State.Result)]
    [InlineData(State.Result, Alphabet.Dot, State.Result)]
    [InlineData(State.Result, Alphabet.ClearEntry, State.Init)]
    [InlineData(State.Result, Alphabet.Clear, State.Init)]
    [InlineData(State.Result, Alphabet.Backspace, State.Result)]
    [InlineData(State.Result, Alphabet.Equation, State.Result)]
    public void ReturnCorrectNextState(
        State currentState, 
        Alphabet input, 
        State expectedNextState)
    {
        var nextState = StateMachine.GetNextState(currentState, input);
        Assert.Equal(expectedNextState, nextState);
    }
}
